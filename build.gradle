buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'jacoco'
apply plugin: 'io.codearte.nexus-staging'

repositories {
    mavenCentral()
    maven {
        url='http://repo.jenkins-ci.org/releases/'
}   }

group = "com.lesfurets"
archivesBaseName = "jenkins-pipeline-unit"
version = "1.0-SNAPSHOT"

dependencies {
    compile     group: 'org.codehaus.groovy',   name: 'groovy-all',     version: '2.4.6'
    compile     group: 'com.cloudbees',         name: 'groovy-cps',     version: '1.12'
    compile     group: 'commons-io',            name: 'commons-io',     version: '2.5'
    compile     group: 'org.apache.ivy',        name: 'ivy',            version: '2.4.0'
    compile     group: 'org.jenkins-ci.plugins',name: 'docker-workflow', version: '1.9', ext: 'jar'
//    compile     group: 'org.jenkins-ci.plugins',name: 'docker-commons', version: '1.5', ext: 'jar'
    compileOnly group: 'org.assertj',           name: 'assertj-core',   version: '3.4.1'
    testCompile group: 'org.assertj',           name: 'assertj-core',   version: '3.4.1'
    testCompile group: 'junit',                 name: 'junit',          version: '4.11'
}

// Get external properties from file
if (project.hasProperty('extProps')) {
    def props = new Properties()
    file("$extProps").withInputStream { props.load(it) }
    props.stringPropertyNames().forEach {
        ext."$it" = props.getProperty(it)
    }
}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from groovydoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            def repo = project.hasProperty('repository') ?
                            project.repository :
                            "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            repository(url: repo) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            def snapRepo = project.hasProperty('snapshotRepository') ?
                            project.snapshotRepository :
                            "https://oss.sonatype.org/content/repositories/snapshots/"
            snapshotRepository(url: snapRepo) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name "$project.group:$project.archivesBaseName"
                packaging 'jar'
                description 'Jenkins Pipeline Unit testing framework'
                url 'https://github.com/lesfurets/JenkinsPipelineUnit'

                scm {
                    url 'https://github.com/lesfurets/JenkinsPipelineUnit'
                    connection 'scm:git:git://github.com/lesfurets/JenkinsPipelineUnit.git'
                    developerConnection 'scm:git:git@github.com/lesfurets/JenkinsPipelineUnit.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'ozangunalp'
                        name 'Ozan Gunalp'
                        email 'ozangunalp@gmail.com'
                        url 'https://github.com/ozangunalp'
                        organization 'lesfurets.com'
                        organizationUrl 'https://github.com/lesfurets'
                    }
                    developer {
                        id 'EQuincerot'
                        name 'Emmanuel Quincerot'
                        url 'https://github.com/EQuincerot'
                        organization 'lesfurets.com'
                        organizationUrl 'https://github.com/lesfurets'
                    }
                    developer {
                        name 'Thomas du Bo√øs'
                        url 'https://github.com/Skool'
                        id 'Skool'
                        organization 'lesfurets.com'
                        organizationUrl 'https://github.com/lesfurets'
                    }
                }
            }
        }
    }
}

closeAndPromoteRepository.mustRunAfter(uploadArchives)
closeRepository.enabled = !project.version.toString().endsWith('-SNAPSHOT')
promoteRepository.enabled = !project.version.toString().endsWith('-SNAPSHOT')

task verify(dependsOn: build)
task deploy(dependsOn: [build, uploadArchives, closeAndPromoteRepository])